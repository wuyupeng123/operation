{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","time","minSize","JCB","name","submitTime","runTime","startTime","alreadyRunTime","finishTime","turnoverTime","rightTurnoverTime","ram","tapeDrive","num","RCB","size","adress","status","timerFunc","bind","assertThisInitialized","main","inputArr","reserveArr","readyArr","runningArr","finishArr","ramArr","state","visible","averTurnoverTime","averRightTurnoverTime","timer","window","clearInterval","setInterval","parseInt","initRamPartition","addJobToReserveArr","addJobToReadyArr","addJobToRunningArr","cpuRunning","length","updateTurnover","setState","refs","input","value","rcSelect","jobObj","copy","push","message","success","error","i","allotRam","console","log","shift","ramObj","initSize","splice","ramNunPlusOne","j","prevNum","updateReadyArr","sort","v","nextV","obj","recycleRam","arr","ramNunLessOne","pop","len","sumTurnoverTime","sumRightTurnoverTime","parseFloat","toFixed","react_default","a","createElement","mainObj","key","objCopy","newArr","_this2","Option","Select","Panel","Collapse","inputColumns","title","dataIndex","className","es_button","type","onClick","restart","setMadalVisible","modal","onOk","addJob","onCancel","handleCancel","maskClosable","centered","width","ref","placeholder","es_select","defaultValue","style","table","dataSource","columns","collapse","defaultActiveKey","header","footer","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.01ac37e7.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport { Button, Input, Select, Table, Modal, Collapse, message  } from 'antd';\nimport './App.css';\n\nclass App extends Component {\n  constructor (props) {\n    super (props)\n    this.time = 0\n    this.minSize = 1\n    this.JCB = {\n      name: '',\n      submitTime: '',\n      runTime: '',\n      startTime: '',\n      alreadyRunTime: '',\n      finishTime: '',\n      turnoverTime:'',\n      rightTurnoverTime:'',\n      ram: '',\n      tapeDrive: '',\n      num: ''\n    }\n    this.RCB = {\n      num: '',\n      size: '',\n      adress: '',\n      status: ''\n    }\n    this.ram = 100\n    this.tapeDrive = 15\n    this.timerFunc = this.timerFunc.bind(this)\n    this.main = this.main.bind(this)\n    this.inputArr = []\n    this.reserveArr = []\n    this.readyArr = []\n    this.runningArr = []\n    this.finishArr = []\n    this.ramArr = []\n    this.state = {\n      tapeDrive: 15,\n      time : 0,\n      visible: false,\n      inputArr: [],\n      reserveArr: [],\n      readyArr: [],\n      runningArr: [],\n      finishArr: [],\n      ramArr: [],\n      averTurnoverTime:'',\n      averRightTurnoverTime: ''\n    }\n    this.timer = 0\n  }\n\n  // 实现计时器\n  timerFunc () {\n    if (this.timer) {\n      window.clearInterval(this.timer);\n    }\n    this.timer = setInterval(this.main, 1000)\n  }\n\n  // 主函数，主要的操作在此执行，放进计时器的回调中，点击运行按钮执行的操作\n  main () {\n    // 刚运行则时对内存表初始化\n    if (parseInt(this.time) === 0) {\n      this.initRamPartition()\n    }\n    this.addJobToReserveArr()\n    this.addJobToReadyArr()\n    this.addJobToRunningArr()\n    this.cpuRunning()\n    if (this.finishArr.length) {\n      this.updateTurnover()\n    }\n    this.time ++ \n    this.setState({\n      time: this.time\n    })\n  }\n  //令输入模态框显示\n  setMadalVisible () {\n    this.setState({\n      visible: true\n    })\n  }\n\n  // 令输入模态框隐藏\n  handleCancel () {\n    this.setState({\n      visible: false\n    })\n  }\n\n  // 增加一个作业到预输入列表 \n  addJob () {\n    let name = this.refs.name.input.value\n    let submitTime = this.refs.submitTime.input.value\n    let runTime = this.refs.runTime.input.value\n    let ram = this.refs.ram.input.value\n    let tapeDrive = this.refs.tapeDrive.rcSelect.state.value[0]\n    let jobObj = this.copy(this.JCB)\n\n    // 判断表单是否有未填\n    if (!name || !submitTime || !runTime || !ram || !tapeDrive) {\n      message.error('表单未填写完，请填写！！')\n      return\n    }\n    jobObj.name = name\n    jobObj.submitTime = submitTime\n    jobObj.runTime = runTime\n    jobObj.ram = ram\n    jobObj.tapeDrive = tapeDrive\n  \n    this.inputArr.push(jobObj)\n    this.setState({\n      inputArr: this.inputArr\n    })\n    message.success('添加成功')\n  }\n\n  // 将预输入的作业添加到后备队列中\n  addJobToReserveArr () {\n\n    let inputArr = this.inputArr\n    // 判断预输入的队列是否为空\n    if (!inputArr.length) {\n      message.error('请添加作业再运行！！')\n      this.time = 0\n      window.clearInterval(this.timer);\n      return false\n    } \n    for (let i = 0; i < inputArr.length; i ++) {\n      // 将已经到达时间的作业放进后备队列中\n      if (this.time === parseInt(inputArr[i].submitTime)) {\n        this.reserveArr.push(this.copy(inputArr[i]))        // 要对对象进行浅拷贝，不然两数组会共享同一变量\n      }\n    }\n    this.setState({\n      reserveArr: this.reserveArr\n    })\n    return true\n  }\n\n  // 根据内存情况将作业从后备队列取出放进就绪队列中\n  addJobToReadyArr () {\n    let reserveArr = this.reserveArr\n    let readyArr = this.readyArr\n    // 如果后备队列为空，直接返回\n    if (!reserveArr.length) {\n      return \n    }\n    // 采用先来先服务的策略从后备队列选出作业添加到就绪队列\n    while (reserveArr.length && this.allotRam(reserveArr[0].ram) && reserveArr[0].tapeDrive <= this.tapeDrive) {\n        this.tapeDrive -= reserveArr[0].tapeDrive\n        reserveArr[0].alreadyRunTime = 0\n        console.log()\n        readyArr.push(reserveArr[0])\n        reserveArr.shift()\n    }\n    this.setState({\n      reserveArr: this.reserveArr,\n      readyArr: this.readyArr,\n      tapeDrive: this.tapeDrive\n    })\n  }\n\n  \n  // 采用首次适应算法分配内存\n  allotRam (ram) {\n    let ramArr = this.ramArr\n    let i = 0\n    for (i = 0; i < ramArr.length; i ++) {\n      if (ramArr[i].status) {\n        continue\n      }\n      if (ramArr[i].size >= ram) {\n        this.reserveArr[0].num = i + 1\n        if ((ramArr[i].size - ram) < this.minSize) {        \n          ramArr[i].status = 1\n        } else {\n          let ramObj = this.copy(this.RCB)\n          let initSize = ramArr[i].size\n          console.log(initSize)\n          ramArr[i].status = 1\n          ramArr[i].size = ram\n          ramObj.num = parseInt(ramArr[i].num) + 1\n          ramObj.size = parseInt(initSize) - parseInt(ram)\n          ramObj.adress = parseInt(ramArr[i].adress) + parseInt(ram)\n          ramObj.status = 0\n          console.log(ramObj)\n          ramArr.splice(i + 1, 0, ramObj)\n          this.ramNunPlusOne(i + 2)\n        }\n        this.setState({\n          ramArr: this.ramArr\n        }) \n        return true\n      }      \n    }\n    return false\n  }\n\n  // \n  // 在分配内存有碎块的时候对后面的内存块的区号依次加一\n  ramNunPlusOne (j) {\n    let ramArr = this.ramArr\n    for (let i = j; i < ramArr.length; i ++) {\n      if(!ramArr[i].status) {\n        ramArr[i].num += 1\n      }\n      if (ramArr[i].status) {\n        let prevNum = ramArr[i].num\n        ramArr[i].num += 1\n        this.updateReadyArr(ramArr[i].num, prevNum)\n      }\n    }\n    return true\n  }\n  // 更新内存表的时候把已分配的内存中的作业的内存块更新\n  updateReadyArr (num, prevNum) {\n    let readyArr = this.readyArr\n    for(let i = 0; i < readyArr.length;i ++) {\n      if(parseInt(readyArr[i].num) === parseInt(prevNum)) {\n        readyArr[i].num = num\n      }\n    }\n    if (this.runningArr.length) {\n      if (parseInt(this.runningArr[0].num) === parseInt(prevNum)){\n        this.runningArr[0].num = num\n      }\n    }\n    \n  }\n  // 在分配内存有碎块的时候对后面的内存块的区号依次减一\n  ramNunLessOne (j) {\n    let ramArr = this.ramArr\n    for (let i = j; i < ramArr.length; i ++) {\n      if(!ramArr[i].status) {\n        ramArr[i].num -= 1\n      }\n      if (ramArr[i].status) {\n        let prevNum = ramArr[i].num\n        ramArr[i].num -= 1\n        this.updateReadyArr(ramArr[i].num, prevNum)\n      }\n    }\n    return true\n  }\n  // 初始化内存表\n  initRamPartition() {\n    if (!this.ram) {\n      message.error('请选择系统的内存！！！')\n      return false\n    }\n    let ramObj = this.copy(this.RCB)\n    ramObj.num = 1\n    ramObj.size = this.ram\n    ramObj.adress = 0\n    ramObj.status = 0     // 0表示空闲，1表示已经分配\n    this.ramArr.push(ramObj)\n    this.setState({\n      ramArr: this.ramArr\n    })\n  }\n  // 采用最短时间优先的可抢占策略将就绪队列的作业放进cpu执行\n  addJobToRunningArr () {\n    let readyArr = this.readyArr\n    let runningArr = this.runningArr\n    if (!readyArr.length) {\n      return\n    }\n    // 先对就绪队列的作业安服务时间的大小排序\n    readyArr.sort((v, nextV) => v.runTime - nextV.runTime)\n    if (runningArr.length) {\n      if (readyArr[0].runTime < runningArr[0].runTime) {\n        let obj = readyArr.shift()\n        runningArr.push(obj)\n        readyArr.push(runningArr.shift())\n      }\n    } else {\n      runningArr.push(readyArr.shift())\n    }\n\n    this.setState({\n      readyArr: this.readyArr,\n      runningArr: this.runningArr\n    })\n  }\n\n  // 在cpu运行\n  cpuRunning () {\n    let runningArr = this.runningArr\n    if (runningArr.length) {\n      runningArr[0].alreadyRunTime += 1\n      if (runningArr[0].alreadyRunTime >= runningArr[0].runTime) {\n        this.recycleRam()\n\n        runningArr[0].finishTime = this.time + 1\n        runningArr[0].turnoverTime = parseInt(runningArr[0].finishTime) - parseInt(runningArr[0].submitTime)\n        runningArr[0].rightTurnoverTime = parseInt(runningArr[0].turnoverTime) / runningArr[0].runTime\n        this.finishArr.push(runningArr.shift())\n      }\n    }\n    this.setState({\n      finishArr:this.finishArr,\n      runningArr:this.runningArr\n    })\n  }\n  // 内存回收\n  recycleRam () {\n    let runningArr = this.runningArr\n    let ramArr = this.ramArr\n    let num = runningArr[0].num\n    for (let i = 0; i < ramArr.length; i ++) {\n      if (parseInt(ramArr[i].num) === parseInt(num)) {\n        ramArr[i].status = 0\n        if (i === 0) {\n          if (ramArr[i + 1] && parseInt(ramArr[i + 1].status) === 0) {\n            let arr = ramArr.splice(i + 1, 1)\n            ramArr[i].size = parseInt(ramArr[i].size) + parseInt(arr[0].size)\n            this.ramNunLessOne(i + 1)\n          }\n          console.log(ramArr)\n          ramArr[i].status = 0\n        } else if (i === ramArr.length - 1 && i - 1 >= 0) {\n          if (!ramArr[i - 1].status) {\n            let arr = ramArr.pop()\n            console.log(arr)\n            ramArr[i - 1].size = parseInt(ramArr[i - 1].size) + parseInt(arr[0].size)\n            ramArr[i - 1].status = 0\n            console.log(ramArr)\n          } else {\n            ramArr[i].status = 0\n            console.log(ramArr)\n          }\n        } else {\n          if (ramArr[i - 1].status && !ramArr[i + 1].status) {\n            let arr = ramArr.splice(i + 1, 1)\n            console.log(arr)\n            ramArr[i].size = parseInt(ramArr[i].size) + parseInt(arr[0].size)\n            ramArr[i].status = 0\n            this.ramNunLessOne(i + 1)\n          } else if (!ramArr[i - 1].status && ramArr[i + 1].status) {\n            let arr = ramArr.splice(i, 1)\n            console.log(arr)\n            ramArr[i - 1].size = parseInt(ramArr[i - 1].size) + parseInt(arr[0].size)\n            ramArr[i - 1].status = 0\n            this.ramNunLessOne(i)\n          } else if (!ramArr[i - 1].status && !ramArr[i + 1].status) {\n            let arr = ramArr.splice(i, 2)\n            console.log(arr)\n            ramArr[i - 1].size = parseInt(ramArr[i - 1].size) + parseInt(arr[0].size)\n            ramArr[i - 1].size = parseInt(ramArr[i - 1].size) + parseInt(arr[1].size)\n            ramArr[i - 1].status = 0\n            this.ramNunLessOne(i)\n            this.ramNunLessOne(i)\n          } else {\n            ramArr[i].status = 0\n          }\n        }\n        break\n      }\n    }\n    \n  }\n  // 更新footer的周转时间\n  updateTurnover () {\n    let finishArr = this.finishArr\n    let len = finishArr.length\n    let sumTurnoverTime = 0, sumRightTurnoverTime = 0\n    let averTurnoverTime, averRightTurnoverTime\n    for (let i = 0; i < len;i ++) {\n      sumTurnoverTime += finishArr[i].turnoverTime\n      sumRightTurnoverTime += finishArr[i].rightTurnoverTime\n    }\n    averTurnoverTime = (parseFloat(sumTurnoverTime) / len).toFixed(2)\n    averRightTurnoverTime = (parseFloat(sumRightTurnoverTime) / len).toFixed(2)\n    this.setState({\n      averTurnoverTime:averTurnoverTime,\n      averRightTurnoverTime: averRightTurnoverTime\n    })\n  }\n  // 重启数据 \n  restart () {\n    if (this.timer) {\n      window.clearInterval(this.timer)\n    }\n    this.time = 0\n    this.inputArr = []\n    this.reserveArr = []\n    this.readyArr = []\n    this.runningArr = []\n    this.finishArr = []\n    this.ramArr = []\n    this.tapeDrive = 15\n    this.setState({\n      tapeDrive:this.tapeDrive,\n      time: this.time,\n      inputArr:this.inputArr,\n      reserveArr: this.reserveArr,\n      readyArr: this.readyArr,\n      runningArr: this.runningArr,\n      finishArr: this.finishArr,\n      ramArr: this.ramArr\n    })\n  }\n  // 返回表格的footer组件\n  footer(){\n    return (\n      <div>\n        <span>平均周转时间：{ this.state.averTurnoverTime} </span>\n        <span>平均带权周转时间：{ this.state.averRightTurnoverTime}</span>\n      </div>\n    )\n  }\n  // 浅拷贝对象方法\n  copy(mainObj) {\n    let objCopy = {}; // objCopy 将存储 mainObj 的副本\n    let key;\n   \n    for (key in mainObj) {\n      objCopy[key] = mainObj[key]; // 将每个属性复制到objCopy对象\n    }\n    return objCopy;\n  }\n\n  // 深拷贝两层数组\n  copyArr (arr) {\n    let newArr = []\n    for (let i = 0; i < arr.length; i ++) {\n      newArr.push(this.copy(arr[i]))           // 将数组的每个对象复制到另一数组\n    }\n    return newArr\n  }\n\n  render () {\n    const Option = Select.Option \n    const Panel = Collapse.Panel;\n    const inputColumns = [{\n          title: '作业',\n          dataIndex: 'name',\n          key: 'name',\n        }, {\n          title: '到达时间',\n          dataIndex: 'submitTime',\n          key: 'submitTime',\n        }, {\n          title: '估计运行时间',\n          dataIndex: 'runTime',\n          key: 'runTime',\n        }, {\n          title: '内存',\n          dataIndex: 'ram',\n          key: 'ram',\n        }, {\n          title: '磁带机',\n          dataIndex: 'tapeDrive',\n          key: 'tapeDrive',\n        }]\n    const readyColumns = [{\n          title: '作业',\n          dataIndex: 'name',\n          key: 'name',\n        }, {\n          title: '到达时间',\n          dataIndex: 'submitTime',\n          key: 'submitTime',\n        }, {\n          title: '估计运行时间',\n          dataIndex: 'runTime',\n          key: 'runTime',\n        }, {\n          title: '内存',\n          dataIndex: 'ram',\n          key: 'ram',\n        }, {\n          title: '磁带机',\n          dataIndex: 'tapeDrive',\n          key: 'tapeDrive',\n        }, {\n          title: '所在内存',\n          dataIndex: 'num',\n          key: 'num',\n        }]\n\n    const runningColumns = [{\n          title: '作业',\n          dataIndex: 'name',\n          key: 'name',\n        }, {\n          title: '到达时间',\n          dataIndex: 'submitTime',\n          key: 'submitTime',\n        }, {\n          title: '估计运行时间',\n          dataIndex: 'runTime',\n          key: 'runTime',\n        }, {\n          title: '内存',\n          dataIndex: 'ram',\n          key: 'ram',\n        }, {\n          title: '磁带机',\n          dataIndex: 'tapeDrive',\n          key: 'tapeDrive',\n        }]\n\n    const finishColumns = [{\n          title: '作业',\n          dataIndex: 'name',\n          key: 'name',\n        }, {\n          title: '到达时间',\n          dataIndex: 'submitTime',\n          key: 'submitTime',\n        }, {\n          title: '估计运行时间',\n          dataIndex: 'runTime',\n          key: 'runTime',\n        }, {\n          title: '内存',\n          dataIndex: 'ram',\n          key: 'ram',\n        }, {\n          title: '磁带机',\n          dataIndex: 'tapeDrive',\n          key: 'tapeDrive',\n        }, {\n          title: '完成时间',\n          dataIndex: 'finishTime',\n          key: 'finishTime',\n        }, {\n          title: '周转时间',\n          dataIndex: 'turnoverTime',\n          key: 'turnoverTime'\n        }, {\n          title: '带权周转时间',\n          dataIndex: 'rightTurnoverTime',\n          key: 'rightTurnoverTime'\n        }]\n\n    const ramColumns = [{\n          title: '分区号',\n          dataIndex: 'num',\n          key: 'num',\n        }, {\n              title: '分区大小',\n              dataIndex: 'size',\n              key: 'size',\n        }, {\n              title: '分区始址',\n              dataIndex: 'adress',\n              key: 'adress',\n        }, {\n              title: '状态',\n              dataIndex: 'status',\n              key: 'status',\n        }]\n    return (\n      <div className = 'mainpanel'>\n        {/* <div style = { { width: '40vw'} }></div> */}\n        <div className = 'leftPanel'>\n          <div className = 'leftPanel-header'>\n            <div>\n              <span>时间：{ this.state.time}</span>\n            </div>\n            <div>\n              <span>磁带机：{ this.state.tapeDrive}</span>\n            </div>\n            <div>\n              <span>作业调度： 先来先服务</span>\n            </div>\n            <div>\n              <span>进程调度： 可抢占的最短作业优先算法</span>\n            </div>\n            <div className = 'leftPanel-header-lastItem'>\n              <span>动态分区： 首次适应算法</span>\n            </div>\n            <div className = 'leftPanel-header-btn'>\n              <Button size = 'small' type=\"primary\" onClick = { () => this.restart() }>重启</Button>\n              <Button size = 'small' type=\"primary\" onClick = { () => this.setMadalVisible() }>添加作业</Button>\n              <Button size = 'small' type=\"primary\" onClick = { () => this.timerFunc() }>运行</Button>\n            </div>\n          </div>\n          <div className = 'leftPanel-input'>\n            <Modal\n              title=\"添加作业\"\n              visible={this.state.visible}\n              onOk={() => this.addJob()}\n              onCancel={() => this.handleCancel()}\n              maskClosable\n              centered\n              width = { 300 }\n            >\n              <div className = 'modal-item'>\n                <span>作业名：</span>\n                <div className = 'modal-item-input'>\n                  <Input ref = 'name' placeholder=\"作业名\" size=\"small\" />\n                </div>\n              </div>\n              <div className = 'modal-item'>\n                <span>到达时间：</span>\n                <div className = 'modal-item-input'>\n                  <Input ref = 'submitTime' placeholder=\"到达时间\" size=\"small\" />\n                </div>\n              </div>\n              <div className = 'modal-item'>\n                <span>估计运行时间：</span>\n                <div className = 'modal-item-input'>\n                  <Input ref = 'runTime' placeholder=\"估计运行时间\" size=\"small\" />\n                </div>\n              </div>\n              <div className = 'modal-item'>\n                <span>所需内存：</span>\n                <div className = 'modal-item-input'>\n                  <Input ref = 'ram' placeholder=\"所需内存\" size=\"small\"/>\n                </div>\n              </div>\n              <div className = 'modal-item'>\n                <span>磁带机：</span>\n                <div className = 'modal-item-input '>\n                  <Select ref = 'tapeDrive' defaultValue=\"1\" style={{ width: 50 }} >\n                    <Option value='1'>1</Option>\n                    <Option value=\"2\">2</Option>\n                    <Option value=\"3\" >3</Option>\n                    <Option value=\"4\">4</Option>\n                    <Option value=\"5\">5</Option>\n                    <Option value=\"6\">6</Option>\n                    <Option value=\"7\">7</Option>\n                  </Select>\n                </div>\n              </div>\n            </Modal>\n            </div>\n            \n          <div className = 'leftPanel-table'>\n            <div>预输入</div>\n            <Table size = 'small' dataSource={this.state.inputArr} columns={ inputColumns } />\n          </div>\n        </div>\n        <div className = 'rightPanel'>\n          <Collapse defaultActiveKey={['1']}>\n            <Panel header=\"正在运行的进程\" key=\"1\">\n              <div className = 'rightPanel-teble'>\n                <Table size = 'small' dataSource={this.state.runningArr} columns={ runningColumns } />\n              </div>\n            </Panel>\n            <Panel header=\"内存就绪队列\" key=\"2\">\n              <div className = 'rightPanel-teble'>\n                <Table size = 'small' dataSource={this.state.readyArr} columns={ readyColumns } />\n              </div>\n            </Panel>\n            <Panel header=\"外存就绪队列\" key=\"3\">\n              <div className = 'rightPanel-teble'>\n                <Table size = 'small' dataSource={this.state.reserveArr} columns={ inputColumns } />\n              </div>\n            </Panel> \n            <Panel header=\"已完成列表\" key=\"4\">\n              <Table\n                footer={() => this.footer()} \n                size = 'small' \n                dataSource={this.state.finishArr} \n                columns={ finishColumns } />\n            </Panel> \n            <Panel header=\"内存分区表\" key=\"5\">\n              <Table size = 'small' dataSource={this.state.ramArr} columns={ ramColumns } />\n            </Panel> \n          </Collapse>\n        </div>\n        <div></div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}